// Generated by Dagger (https://dagger.dev).
package dagger;

import bot.BabyKoopaApp;
import bot.BabyKoopaApp_MembersInjector;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import net.dv8tion.jda.api.JDA;
import org.apache.commons.configuration2.Configuration;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBabyKoopaComponent implements BabyKoopaComponent {
  private final DaggerBabyKoopaComponent babyKoopaComponent = this;

  private Provider<Configuration> providesConfigurationProvider;

  private Provider<String> providesTokenProvider;

  private Provider<JDA> providesJDAProvider;

  private DaggerBabyKoopaComponent() {

    initialize();

  }

  public static Builder builder() {
    return new Builder();
  }

  public static BabyKoopaComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.providesConfigurationProvider = DoubleCheck.provider(DependenciesModule_ProvidesConfigurationFactory.create());
    this.providesTokenProvider = DoubleCheck.provider(DependenciesModule_ProvidesTokenFactory.create(providesConfigurationProvider));
    this.providesJDAProvider = DoubleCheck.provider(DependenciesModule_ProvidesJDAFactory.create(providesTokenProvider));
  }

  @Override
  public void inject(BabyKoopaApp app) {
    injectBabyKoopaApp(app);
  }

  @CanIgnoreReturnValue
  private BabyKoopaApp injectBabyKoopaApp(BabyKoopaApp instance) {
    BabyKoopaApp_MembersInjector.injectJda(instance, providesJDAProvider.get());
    return instance;
  }

  public static final class Builder {
    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder dependenciesModule(DependenciesModule dependenciesModule) {
      Preconditions.checkNotNull(dependenciesModule);
      return this;
    }

    public BabyKoopaComponent build() {
      return new DaggerBabyKoopaComponent();
    }
  }
}
